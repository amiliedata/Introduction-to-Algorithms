# Merge Sort
def mergesort (S):
    n = len(S)
    if n <= 1:
        return S
    else: 
        mid = n//2
        U = mergesort(S[0:mid])
        V = mergesort(S[mid:n])
        return merge(U, V)
    

def merge(U, V):
    S = []
    i = j = 0
    while i < len(U) and j < len(V):
        if (U[i] < V[j]):
            S.append(U[i])
            i += 1
        else:
            S.append(V[j])
            j += 1
    if i < len(U):  # U에 남은 S를 븥여주는것
        S += U[i : len(U)]
    else:
        S += V[j : len(V)]
    return S

S = [27, 10, 12, 20, 25, 13, 15, 22]
print('Before:', S)
X = mergesort(S)
print('After:', X)


# 문제점 : 메모리 사용의 비효울성
# 입력 리스트 S이외에 리스트 U,V 추가적 사용
# 전체 재귀 호출시 원소의 개수 : n + n/2 + n/4 + n/8 + ... = 2n


# Enhanced Merge Sort
def mergesort2 (S, low, high):
    if (low < high):
        mid = (low + high) // 2
        mergesort2(S, low, mid)
        mergesort2(S, mid+1, high)
        print(S)  #전체 과정 보기 위한 것
        merge2(S, low, mid, high)


def merge2(S, low, mid, high):
    U = []
    i = low
    j = mid + 1
    while i <= mid and j <= high:
        if S[i] < S[j]:
            U.append(S[i])
            i +=1
        else:
            U.append(S[j])
            j += 1
    if i <= mid :
        U += S[i : mid + 1]
    else:
        U += S[j : high + 1]
    for k in range(low, high + 1):
        S[k] = U[k - low]   # S에 정렬된 U값 대입

#V를 안쓰고 U만쓰니까 n개 절약


S = [27, 10, 12, 20, 25, 13, 15, 22]
print('Before:', S)
X = mergesort2(S, 0, len(S)-1)
print('After:', X)
