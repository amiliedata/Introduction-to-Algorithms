# binary search - lg n +1 번 수행 / lg = log 밑 2
def binsearch(n, S, x):
    low = 1
    high = n
    location = 0
    while (low <= high and location == 0):
        mid = (low + high) // 2
        if (x == S[mid]):
            location = mid
        elif (x < S[mid]):
            high = mid - 1
        else:
            low = mid + 1
    return location

S = [-1, 5, 7, 8, 10, 11, 13]
x = 2

location = binsearch(len(S), S, x) 
print('S =', S)
print('x =', x)
print('location =', location)


# Finding the nth term of the Fibonacci sequence
# Recursive (함수를 다시 호출하는 방법)
def fib(n):
    if n <= 1 :
        return n
    else:
        return fib(n-1) + fib(n-2)

for i in range(10):
    print(fib(i), end=' ')


# low efficiency 
# 같은 함수 값을 여러번 호출하기 때문에!


#index를 이용하여 풀면 더 가벼워짐!

# Iterative
def fib2(n):
    f = [0] *(n+1)   #f는 index n 까지의 list
    if n > 0:
        f[1] = 1
        for i in range (2, n+1):
            f[i] = f[i-1] + f [i-2]
    return f[n]

for i in range(10):
    print(fib2(i), end=' ')


# list f를 사용하지 않고 반복문으로 피보나치 항구하기
# 변수 3개만 있으면 n 번째 항까지 구할 수 있음
def fib3(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    
    prev_prev = 0
    prev = 1
    current = 0

    for i in range(2, n+1):
        current = prev_prev + prev
        prev_prev = prev
        prev = current

    return current

print(fib3(10))
